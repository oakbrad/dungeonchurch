services:

  # NGINX PROXY
  # https://github.com/NginxProxyManager/nginx-proxy-manager
  nginx:
    image: jc21/nginx-proxy-manager:latest
    restart: unless-stopped
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
      - "81:81"
    volumes:
      - /home/ubuntu/nginx/data:/data
      - /home/ubuntu/nginx/letsencrypt:/letsencrypt
    networks:
      - public-proxy # PUBLIC SERVICES MUST CONNECT TO THIS NETWORK

  # NODERED
  # https://nodered.org/docs/getting-started/docker
  node-red:
    image: nodered/node-red:latest-18
    container_name: nodered
    restart: unless-stopped
    volumes:
      - /home/ubuntu/nodered:/data
    environment:
      - TZ=America/Los_Angeles
      - NODE_RED_CREDENTIAL_SECRET="XXX"
    networks:
      - public-proxy

# FOUNDRY
# https://github.com/felddy/foundryvtt-docker
  foundryvtt:
    container_name: foundryvtt
    image: felddy/foundryvtt:release
    hostname: XXX.dungeon.church
    restart: unless-stopped
    networks:
      - public-proxy
    volumes:
      - /home/ubuntu/foundryvtt:/data
      - /home/ubuntu/5etools/homebrew:/data/Data/assets/homebrew
    environment:
      - UID=1001
      - GID=1001
      - FOUNDRY_USERNAME=XXX
      - FOUNDRY_PASSWORD=XXX
      - CONTAINER_CACHE=/data/cache
      - FOUNDRY_ADMIN_KEY=XXX
      - FOUNDRY_MINIFY_STATIC_FILES=true
      - FOUNDRY_HOSTNAME=XXX.dungeon.church
      - VIRTUAL_HOST=XXXX.dungeon.church
      - FOUNDRY_AWS_CONFIG=aws.json # Backblaze B2
      - FOUNDRY_PROXY_PORT=443
      - FOUNDRY_PROXY_SSL=true
      - VIRTUAL_PORT=30000
      - TIMEZONE='America/Los_Angeles'
      - FOUNDRY_UID=1001
      - FOUNDRY_GID=1001
    ports:
      - 30000:30000/tcp
    links:
      - ddb-proxy:ddb-proxy

# FOUNDRY 2 WITH SHARING
# This sets up a second FVTT server that shares content & settings with the first
  foundryvtt2:
    container_name: foundry2
    image: felddy/foundryvtt:release
    hostname: XXX.dungeon.church
    restart: unless-stopped
    networks:
      - public-proxy
    volumes:
      - /home/ubuntu/foundryvtt2:/data # needs its own root /data folder
      - /home/ubuntu/foundryvtt/Data:/data/Data  # shares the /data/Data folder that contains content
      - /home/ubuntu/foundryvtt/cache:/data/cache
      - /home/ubuntu/5etools/homebrew:/data/Data/assets/homebrew
    environment:
      - UID=1001
      - GID=1001
      - FOUNDRY_USERNAME=XXX
      - FOUNDRY_PASSWORD=XXX
      - CONTAINER_CACHE=/data/cache
      - FOUNDRY_ADMIN_KEY=XXX
      - FOUNDRY_MINIFY_STATIC_FILES=true
      - FOUNDRY_HOSTNAME=XXX.dungeon.church
      - VIRTUAL_HOST=XXX.dungeon.church
      - FOUNDRY_AWS_CONFIG=aws.json
      - FOUNDRY_PROXY_PORT=443
      - FOUNDRY_PROXY_SSL=true
      - VIRTUAL_PORT=30000
      - TIMEZONE='America/Los_Angeles'
      - FOUNDRY_UID=1001
      - FOUNDRY_GID=1001
    ports:
      - 30001:30000/tcp

# CONNECTS FOUNDRY to D&D BEYOND
# Our group isn't using this anymore, but leaving in as example
# https://github.com/MrPrimate/ddb-proxy
  ddb-proxy:
    image: ghcr.io/mrprimate/ddb-proxy:latest
    container_name: ddb-proxy
    restart: unless-stopped
    networks:
      - public-proxy

# 5E TOOLS
# https://github.com/Jafner/5etools-docker
  5etools:
    restart: unless-stopped
    container_name: 5etools
    image: jafner/5etools-docker
    volumes:
      - /home/ubuntu/5etools:/usr/local/apache2/htdocs
      - /home/ubuntu/5etools-homebrew:/usr/local/apache2/htdocs/homebrew
    environment:
      - SOURCE=GITHUB
      - IMG=TRUE
      # Use the 2014 Rules
      - DL_LINK=https://github.com/5etools-mirror-3/5etools-2014-src.git
      - IMG_LINK=https://github.com/5etools-mirror-3/5etools-2014-img.git
    networks:
      - public-proxy

# HOMEBREWERY
# https://github.com/naturalcrit/homebrewery
  homebrewdb:
    image: mongo:latest
    container_name: homebrewdb
    volumes:
      - /home/ubuntu/homebrewery/db:/data/db
    networks:
      - homebrew-internal
  homebrew:
    restart: unless-stopped
    container_name: homebrew
    # FIRST: clone the repo, then pull node:18-alpine
    # git clone https://github.com/naturalcrit/homebrewery
    # docker pull node:18-alpine
    build:
      context: ./homebrewery
      dockerfile: Dockerfile
    image: homebrewery
    depends_on:
      - homebrewdb
    environment:
      MONGODB_URI: mongodb://homebrewdb/homebrewery
    networks:
      - homebrew-internal
      - public-proxy

# OUTLINE STACK
#
# DB FOR OUTLINE
  postdb:
    image: postgres:13
    restart: unless-stopped
    container_name: postdb
    environment:
      - POSTGRES_USER=XXX
      - POSTGRES_PASSWORD=XXX
      - POSTGRES_DB=XXX
    volumes:
      - /home/ubuntu/dbpost:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - outline-internal
# OUTLINE DB BACKUP
  postdb_backup:
    image: postgres:13
    depends_on:
      - postdb
    volumes:
      - /mnt/s3/backup:/backup
    command: >
      bash -c "while true; do
        PGPASSWORD=$$POSTGRES_PASSWORD pg_dump -h postdb -U $$POSTGRES_USER -Fc $$POSTGRES_DB > /backup/$$(date +%Y-%m-%d-%H-%M-%S)-outline-postgres.dump
        echo ""Backup done at $$(date +%Y-%m-%d_%H:%M:%S)""
        ls -1 /backup/*.dump | head -n -30 | xargs rm -f
        sleep 86400
      done"
    environment:
      POSTGRES_USER: XXX
      POSTGRES_PASSWORD: XXX
      POSTGRES_DB: XXX
    networks:
      - outline-internal
# REDIS FOR OUTLINE
  redis:
    image: redis
    restart: unless-stopped
    container_name: redis
    networks:
      - outline-internal

# OUTLINE WIKI
# https://github.com/outline/outline
  outline:
    image: outlinewiki/outline:0.78.0
    container_name: outline
    restart: unless-stopped
    # USE THIS TO UPGRADE
    #command: sh -c "sleep 5 && yarn db:migrate --env=production-ssl-disabled"
    # USE THIS TO RUN PRODUCTION SERVICE
    command: yarn start --env=production-ssl-disabled
    depends_on:
      - postdb
      - redis
    links:
      - postdb:postdb
      - redis:redis
    env_file:
      - /home/ubuntu/outline/outline.env
    ports:
      - "1661:80"
    volumes:
      - /home/ubuntu/outline/data:/var/lib/outline/data
    networks:
      - outline-internal
      - public-proxy

#
# OPTIONAL OUTLINE INTEGRATIONS
#
  # DRAWIO
  # https://github.com/jgraph/docker-drawio
  drawio:
    image: jgraph/drawio
    container_name: drawio
    restart: unless-stopped
    environment:
      - PUBLIC_DNS=your.tld
      - DRAWIO_BASE_URL=your.tld
      - DRAWIO_GOOGLE_CLIENT_ID=XXX
      - DRAWIO_GOOGLE_CLIENT_SECRET=XXX
      - DRAWIO_GOOGLE_APP_ID=XXX
      - DRAWIO_GOOGLE_VIEWER_CLIENT_ID=XXX
      - DRAWIO_GOOGLE_VIEWER_CLIENT_SECRET=XXX
      - DRAWIO_GOOGLE_VIEWER_APP_ID=XXX
      - KEYSTORE_PASS=XXX
    networks:
      - public-proxy


# GHOST STACK
#
# GHOST
# https://github.com/TryGhost/Ghost
  ghost_dungeon:
    image: ghost:latest
    restart: always
    container_name: ghost_dungeon
    networks:
      - public-proxy
      - internal-db
    links:
      - db:db
    depends_on:
      - db
    environment:
      # see https://ghost.org/docs/config/#configuration-options
      - database__client=mysql
      - database__connection__host=db
      - database__connection__user=XXX
      - database__connection__password=XXX
      - database__connection__database=XXX
      # this url value is just an example, and is likely wrong for your environment!
      - url=https://www.dungeon.church
      # contrary to the default mentioned in the linked documentation, this image defaults to NODE_ENV=production (so development mode needs to be explicitly specified if desired)
      #NODE_ENV: development
      - mail__transport=SMTP
      - mail__options__host=smtp.mailgun.org
      - mail__options__port=587
      - mail__options__auth__user=XXX
      - mail__options__auth__pass=XXX
      - mail__from="Dungeon Church <noreply@dungeon.church>"
    volumes:
      - /home/ubuntu/ghost:/var/lib/ghost
# GHOST DB
  db:
    image: mysql:8.0
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: XXX
    volumes:
      - /home/ubuntu/db:/var/lib/mysql
    networks:
      - internal-db
# GHOST DB BACKUP
  db_backup:
     image: databack/mysql-backup
     restart: always
     container_name: db_backup
     user: "0" # needed for local volume
     environment:
       - DB_DUMP_FREQ=1440 # once a day
       - DB_SERVER=db
       - DB_USER=XXX
       - DB_PASS=XXX
       - DB_NAMES=ghost
       - DB_DUMP_TARGET=/backup
       - DB_DUMP_SAFECHARS=true
     links:
       - db:db
     networks:
       - internal-db
     volumes:
       - /mnt/s3/backup:/backup

# RED DISCORD BOT
# https://github.com/PhasecoreX/docker-red-discordbot
  redbot:
    container_name: redbot
    image: phasecorex/red-discordbot
    restart: unless-stopped
    volumes:
      - /home/ubuntu/redbot:/data
    environment:
      - TOKEN=XXX
      - PREFIX=.
      - TZ=America/Los_Angeles
      - PUID=1000

# QUAKE 3 ARENA
  quake:
    container_name: quake
    image: gl-registry.emzi0767.dev/emzi0767/ioq3-universal/ioq3-universal:latest
    restart: unless-stopped
    volumes:
      - /home/ubuntu/quake/baseq3:/quake/baseq3:ro
      - /home/ubuntu/quake:/quake/home
    ports:
      - 0.0.0.0:27960:27960/udp
# This serves the custom maps
  quake_web:
    image: sebp/lighttpd
    container_name: quake_web
    volumes:
      - /home/ubuntu/quake/baseq3:/var/www/localhost/htdocs
    ports:
      - 27961:80
    tty: true
    restart: unless-stopped
    networks:
      - public-proxy

networks:
  public-proxy:
  internal-db:
  outline-internal:
  homebrew-internal:
